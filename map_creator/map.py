import math

import pygame

import json


class Map:
    TILE_SIZE = 32
    LINE_COLOR = (180, 180, 180)
    zoomed_tile_size = TILE_SIZE
    grid_d_size = TILE_SIZE

    spawn_point = (0, 0)

    tile_map = []

    object_map = []

    npc_map = {}

    temp_object = -1
    temp_object_pos = (0, 0)

    offset_pos = (0, 0)

    show_grid = True

    def grid_pos(self, pos):
        x = int(math.floor((pos[0] + self.offset_pos[0]) / self.zoomed_tile_size))
        y = int(math.floor((pos[1] + self.offset_pos[1]) / self.zoomed_tile_size))
        return x, y

    def ungrid_pos(self, pos):
        x = (pos[0] * self.zoomed_tile_size) - self.offset_pos[0]
        y = (pos[1] * self.zoomed_tile_size) - self.offset_pos[1]
        return x, y

    def grid_object(self, pos, image):
        x = int((pos[0] + self.offset_pos[0]) / self.zoomed_tile_size)
        y = pos[1] + self.offset_pos[1] - image.get_height()
        y = int(y / self.zoomed_tile_size) + 1
        return x, y

    def ungrid_object(self, pos, obj_i):
        x = (pos[0] * self.zoomed_tile_size) - self.offset_pos[0]
        y = (pos[1] + 1) * self.zoomed_tile_size - self.drawable_objects[obj_i].image.get_height() - self.offset_pos[1]
        return x, y

    def __init__(self, tm, om, trm, mm, file):
        self.file = file
        self.map_manager = mm
        self.tile_manager = tm
        self.object_manager = om
        self.npc_manager = trm

        self.sp_image = DrawableSpImage(pygame.image.fromstring(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xe2\x00\x00\x9b\x88\x00\x00\xd3N\x00\x00\xef\x1e\x00\x00\xfc4\x00\x00\xf8h\x00\x00\xe4\xa8\x00\x00\xbf\xec\x00\x00\x95\xff\x00\x00\x8a\xff\x00\x00\x8a\xab\x00\x00\xbd\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff-\x00\x00\xf9k\x00\x00\xe3\xc2\x00\x00\xaf\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\x00\x00\x00\x00\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xd2\x00\x00\xa5&\x00\x00\xfb~\x00\x00\xd8\xe0\x00\x00\x9c\xf9\x00\x00\x8e\xe1\x00\x00\x9c\x9d\x00\x00\xc7&\x00\x00\xfb\x97\x00\x00\xca\xff\x00\x00\x8a\xff\x00\x00\x8a\xab\x00\x00\xbd\x00\x00\x00\xff\xe9\x00\x00\x97\xfe\x00\x00\x8a\xea\x00\x00\x96\x9e\x00\x00\xc6\x00\x00\x00\xff\xa9\x00\x00\xbf\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8ap\x00\x00\xe0G\x00\x00\xf2\xfc\x00\x00\x8c\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xdf\x00\x00\x9d\xa9\x00\x00\xbf\xff\x00\x00\x8a\xff\x00\x00\x8a\xab\x00\x00\xbd\x00\x00\x00\xff\xe9\x00\x00\x97\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8aq\x00\x00\xe01\x00\x00\xf9\xfa\x00\x00\x8d\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8aW\x00\x00\xecb\x00\x00\xe7\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xab\x00\x00\xbd\x00\x00\x00\xff\xe9\x00\x00\x97\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xa0\x00\x00\xc5\x00\x00\x00\xff\xe4\x00\x00\x9a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\x88\x00\x00\xd3\x07\x00\x00\xff\xaa\x00\x00\xbe\xf2\x00\x00\x91\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xab\x00\x00\xbd\x00\x00\x00\xff\xe9\x00\x00\x97\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\x9c\x00\x00\xc7\x00\x00\x00\xff\xe9\x00\x00\x97\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xea\x00\x00\x96_\x00\x00\xe9\x00\x00\x00\xff\x07\x00\x00\xffQ\x00\x00\xee~\x00\x00\xd9\xac\x00\x00\xbd\xee\x00\x00\x94\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xab\x00\x00\xbd\x00\x00\x00\xff\xe9\x00\x00\x97\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a_\x00\x00\xe9W\x00\x00\xec\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xfc\x00\x00\x8c\xca\x00\x00\xaa\x97\x00\x00\xcaq\x00\x00\xe0:\x00\x00\xf6\x00\x00\x00\xff/\x00\x00\xf9\xca\x00\x00\xaa\xff\x00\x00\x8a\xff\x00\x00\x8a\xab\x00\x00\xbd\x00\x00\x00\xff\xe9\x00\x00\x97\xfd\x00\x00\x8b\xe7\x00\x00\x98\x87\x00\x00\xd3\x17\x00\x00\xfd\xcd\x00\x00\xa8\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xcd\x00\x00\xa86\x00\x00\xf7V\x00\x00\xec\xff\x00\x00\x8a\xff\x00\x00\x8a\xab\x00\x00\xbd\x00\x00\x00\xff\x00\x00\x00\xff\x07\x00\x00\xff4\x00\x00\xf8s\x00\x00\xde\xd2\x00\x00\xa5\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\x85\x00\x00\xd5\x1b\x00\x00\xfd\xff\x00\x00\x8a\xff\x00\x00\x8a\xab\x00\x00\xbd\x00\x00\x00\xff\xe9\x00\x00\x97\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\x00\x00\x00\x00\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\x85\x00\x00\xd5\xf7\x00\x00\x8f\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xfe\x00\x00\x8aa\x00\x00\xe8^\x00\x00\xe9\xff\x00\x00\x8a\xff\x00\x00\x8a\xab\x00\x00\xbd\x00\x00\x00\xff\xe9\x00\x00\x97\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a+\x00\x00\xfaH\x00\x00\xf2\xb0\x00\x00\xbb\xe7\x00\x00\x98\xf9\x00\x00\x8e\xe0\x00\x00\x9c\x88\x00\x00\xd3$\x00\x00\xfb\xce\x00\x00\xa7\xff\x00\x00\x8a\xff\x00\x00\x8a\xab\x00\x00\xbd\x00\x00\x00\xff\xe9\x00\x00\x97\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xd9\x00\x00\xa0\x95\x00\x00\xcbW\x00\x00\xec(\x00\x00\xfa\x13\x00\x00\xfeC\x00\x00\xf4\x88\x00\x00\xd3\xe5\x00\x00\x99\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xab\x00\x00\xbd\x00\x00\x00\xff\xe9\x00\x00\x97\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\xff\x00\x00\x8a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00', (32, 32), "RGBA"))
        self.sp_image.resize(self.zoomed_tile_size)

        self.drawable_tiles = []
        self.drawable_objects = []
        self.drawable_npcs = []
        for tile in self.tile_manager.tiles:
            t = DrawableTile(tile.image)
            t.resize(self.zoomed_tile_size)
            self.drawable_tiles.append(t)

        for obj in self.object_manager.objects:
            t = DrawableObject(obj.image, obj.name)
            t.resize(self.zoomed_tile_size / self.TILE_SIZE)
            self.drawable_objects.append(t)

        for tr in self.npc_manager.npcs:
            t = DrawableNpc(tr.images)
            t.resize(self.zoomed_tile_size / self.TILE_SIZE)
            self.drawable_npcs.append(t)

        self.load()

    def load(self):
        try:
            line = open(self.file, "r").readline()

            loaded = json.loads(line)

            self.spawn_point = (int(loaded['spawn_point']['x']), int(loaded['spawn_point']['y']))
            self.tile_map = [[self.tile_manager.get_index(x) for x in y] for y in loaded['tile_map']]
            self.object_map = [[self.object_manager.get_index(x) for x in y] for y in loaded['obj_map']]
            self.npc_map = {}
            for v in loaded['npcs']:
                d = 0
                if 'dir' in v:
                    d = int(v['dir'])
                dialog = []
                if 'dialog' in v:
                    dialog = v['dialog']
                pokemon = []
                if 'pokemon' in v:
                    pokemon = v['pokemon']
                self.npc_map[(int(v['x']), int(v['y']))] = {
                    'i': self.npc_manager.get_index(v['skin']),
                    'dir': d,
                    'dialog': dialog,
                    'pokemon': pokemon}
        except KeyError:
            pass
        except json.decoder.JSONDecodeError:
            pass
        except FileNotFoundError:
            pass

    def stringify_list(self, omap, managed_objs):
        max_len = max([0] + [len(l) for l in omap])

        for y in omap:
            for _ in range(max_len - len(y)):
                y.append(-1)

        namemap = []
        for y in range(len(omap)):
            namemap.append([])
            for x in range(len(omap[y])):
                if omap[y][x] == -1:
                    namemap[y].append('')
                else:
                    namemap[y].append(managed_objs[omap[y][x]].name)
        return namemap

    def stringify_pokemon(self, pokemon):
        np = []
        for p in pokemon:
            np.append({'name': p['name'], 'species': p['name'].lower(), 'lvl': p['lvl']})
        return np

    def stringify_npcs(self, odict, managed_npcs):
        nlist = []
        for k, v in odict.items():
            nlist.append({'x': str(k[0]), 'y': str(k[1]), 'skin': managed_npcs[v['i']].name, 'dir': str(v['dir']),
                          'dialog': v['dialog'], 'pokemon': self.stringify_pokemon(v['pokemon'])})
        return nlist

    def save(self):
        open(self.file, "w").write(json.dumps({
            'spawn_point': {'x': str(self.spawn_point[0]), 'y': str(self.spawn_point[1])},
            'tile_map': self.stringify_list(self.tile_map, self.tile_manager.tiles),
            'obj_map': self.stringify_list(self.object_map, self.object_manager.objects),
            'npcs': self.stringify_npcs(self.npc_map, self.npc_manager.npcs)
        }))
        print("saved")

    def expand(self, x, y):
        while y < 0:
            self.tile_map = [[]] + self.tile_map
            self.object_map = [[]] + self.object_map
            self.offset_pos = (self.offset_pos[0], self.offset_pos[1] + self.zoomed_tile_size)
            self.spawn_point = self.spawn_point[0], self.spawn_point[1] + 1
            moved_npcs = {}
            for k in list(self.npc_map.keys()):
                t = self.npc_map[k]
                moved_npcs[(k[0], k[1]+1)] = t
            y += 1
            self.npc_map = moved_npcs
        while x < 0:
            for y2 in range(len(self.tile_map)):
                self.tile_map[y2] = [-1] + self.tile_map[y2]
            for y2 in range(len(self.object_map)):
                self.object_map[y2] = [-1] + self.object_map[y2]
            self.offset_pos = (self.offset_pos[0] + self.zoomed_tile_size, self.offset_pos[1])
            self.spawn_point = self.spawn_point[0] + 1, self.spawn_point[1]
            moved_npcs = {}
            for k in list(self.npc_map.keys()):
                t = self.npc_map[k]
                moved_npcs[(k[0]+1, k[1])] = t
            x += 1
            self.npc_map = moved_npcs

    def set_tile(self, pos, tile_i, pen_size=1):
        if tile_i is None:
            return
        pen_size_off = pen_size - 1
        xs, ys = self.grid_pos(pos)

        self.expand(xs - pen_size_off, ys - pen_size_off)

        for x in range(xs - pen_size_off, xs + pen_size_off + 1):
            for y in range(ys - pen_size_off, ys + pen_size_off + 1):
                while y > len(self.tile_map) - 1:
                    self.tile_map.append([])
                while x > len(self.tile_map[y]) - 1:
                    self.tile_map[y].append(-1)

                self.tile_map[y][x] = tile_i

    def set_object(self, pos, object_i):
        if object_i is None:
            return
        x, y = self.grid_pos(pos)

        self.expand(x, y)

        while y > len(self.object_map) - 1:
            self.object_map.append([])
        while x > len(self.object_map[y]) - 1:
            self.object_map[y].append(-1)

        self.object_map[y][x] = object_i

    def change_npc(self, pos, npc):
        self.npc_map[pos] = npc

    def set_npc(self, pos, npc_i):
        if npc_i is None:
            return
        if npc_i == -4:
            try:
                del self.npc_map[self.grid_pos(pos)]
            except KeyError:
                pass
        elif npc_i == -3:
            try:
                gp = self.grid_pos(pos)
                npc = self.npc_map[gp]
                self.map_manager.gm.load_npc(gp, npc)
            except KeyError:
                pass
        elif npc_i == -2:
            try:
                gp = self.grid_pos(pos)
                self.npc_map[gp]['dir'] += 1
                if self.npc_map[gp]['dir'] > 3:
                    self.npc_map[gp]['dir'] = 0
            except KeyError:
                pass
        elif npc_i == -1:
            try:
                gp = self.grid_pos(pos)
                self.npc_map[gp]['dir'] -= 1
                if self.npc_map[gp]['dir'] < 0:
                    self.npc_map[gp]['dir'] = 3
            except KeyError:
                pass
        else:
            gp = self.grid_pos(pos)
            if gp in self.npc_map:
                self.npc_map[gp]['i'] = npc_i
            else:
                self.npc_map[gp] = {'i': npc_i, 'dir': 0,  'dialog': [], 'pokemon': []}

    def set_spawn_point(self, pos):
        self.spawn_point = self.grid_pos(pos)

    def set_object_names(self, drawing_names):
        for obj in self.drawable_objects:
            obj.set_drawing_name(drawing_names)

    def show_temp_object(self, selected_object, pos=None):
        self.temp_object = -1 if selected_object is None else selected_object
        if selected_object != -1:
            self.temp_object_pos = pos

    def add_offset(self, x, y):
        self.offset_pos = (x, y)

    def zoom(self, x):
        self.offset_pos = (self.offset_pos[0] / self.zoomed_tile_size, self.offset_pos[1] / self.zoomed_tile_size)

        self.zoomed_tile_size = max(4, self.zoomed_tile_size + x)

        self.grid_d_size = self.zoomed_tile_size

        self.offset_pos = (
            int(self.offset_pos[0] * self.zoomed_tile_size), int(self.offset_pos[1] * self.zoomed_tile_size))

        for tile in self.drawable_tiles:
            tile.resize(self.zoomed_tile_size)

        for obj in self.drawable_objects:
            obj.resize(self.zoomed_tile_size / self.TILE_SIZE)

        for npc in self.drawable_npcs:
            npc.resize(self.zoomed_tile_size / self.TILE_SIZE)

        self.sp_image.resize(self.zoomed_tile_size)

    def toggle_grid(self):
        self.show_grid = not self.show_grid

    def render(self, screen):
        screen.fill((0, 0, 0))

        y = -(self.offset_pos[1] % self.zoomed_tile_size)
        while y < screen.get_height():
            x = -(self.offset_pos[0] % self.zoomed_tile_size)
            while x < screen.get_width():
                xa, ya = self.grid_pos((x, y))
                if 0 <= xa and 0 <= ya:
                    try:
                        ti = self.tile_map[ya][xa]
                        if ti != -1:
                            self.drawable_tiles[ti].draw(screen, x, y)
                    except IndexError:
                        pass
                x += self.zoomed_tile_size
            y += self.zoomed_tile_size

        temp_obj_grid_pos = self.grid_pos(self.temp_object_pos)
        drawn_temp_obj = False

        y = -(self.offset_pos[1] % self.zoomed_tile_size)
        while y < screen.get_height():
            x = -(self.offset_pos[0] % self.zoomed_tile_size)
            while x < screen.get_width():
                xa, ya = self.grid_pos((x, y))
                if 0 <= xa and 0 <= ya:
                    try:
                        oi = self.object_map[ya][xa]
                        if oi != -1:
                            obj = self.drawable_objects[oi]
                            pos = self.ungrid_pos(self.grid_object((x, y), obj.image))
                            obj.draw(screen, pos[0], pos[1])
                    except IndexError:
                        pass
                    if (xa, ya) in self.npc_map:
                        npc = self.drawable_npcs[self.npc_map[(xa, ya)]['i']]
                        pos = self.ungrid_pos(self.grid_object((x, y), npc.images[self.npc_map[(xa, ya)]['dir']]))
                        npc.draw(screen, self.npc_map[(xa, ya)]['dir'], pos[0], pos[1])
                    if self.temp_object != -1 and (xa, ya) == temp_obj_grid_pos:
                        obj = self.drawable_objects[self.temp_object]
                        pos = self.ungrid_pos(self.grid_object((x, y), obj.image))
                        obj.draw(screen, pos[0], pos[1])
                        drawn_temp_obj = True
                x += self.zoomed_tile_size
            y += self.zoomed_tile_size

        if (not drawn_temp_obj) and self.temp_object != -1:
            x, y = self.ungrid_object(temp_obj_grid_pos, self.temp_object)
            self.drawable_objects[self.temp_object].draw(screen, x, y)

        if self.show_grid:
            y = -(self.offset_pos[1] % self.grid_d_size)
            while y < screen.get_height():
                pygame.draw.line(screen, self.LINE_COLOR, (0, y), (screen.get_width(), y), 1)
                y += self.grid_d_size

            x = -(self.offset_pos[0] % self.grid_d_size)
            while x < screen.get_width():
                pygame.draw.line(screen, self.LINE_COLOR, (x, 0), (x, screen.get_height()), 1)
                x += self.grid_d_size

        pos = self.ungrid_pos(self.spawn_point)
        self.sp_image.draw(screen, pos[0], pos[1])


class DrawableSpImage:
    def __init__(self, image):
        self.original_image = image
        self.image = self.original_image.copy()

    def resize(self, new_size):
        self.image = pygame.transform.scale(self.original_image, (new_size, new_size))

    def draw(self, screen, x, y):
        rect = self.image.get_rect(topleft=(x, y))
        screen.blit(self.image, rect)


class DrawableTile:
    def __init__(self, image):
        self.original_image = image
        self.image = self.original_image.copy()

    def resize(self, new_size):
        self.image = pygame.transform.scale(self.original_image, (new_size, new_size))

    def draw(self, screen, x, y):
        rect = self.image.get_rect(topleft=(x, y))
        screen.blit(self.image, rect)


class DrawableObject:
    def __init__(self, image, name):
        self.name = name
        self.original_image = image.copy()

        self.drawing_name = False

        imwidth = self.original_image.get_width()

        self.last_scale = 1

        self.size = 24
        while True:
            font = pygame.font.SysFont('calibre', self.size)
            if font.size(self.name)[0] < imwidth:
                break
            self.size -= 1

        self.image = None

    def set_drawing_name(self, drawing_name):
        if drawing_name != self.drawing_name:
            self.drawing_name = drawing_name
            self.resize(self.last_scale)

    def resize(self, scale):
        self.last_scale = scale

        self.image = pygame.transform.scale(
            self.original_image,
            (int(self.original_image.get_width() * scale), int(self.original_image.get_height() * scale)))

        if self.drawing_name:
            font = pygame.font.SysFont('calibre', int(self.size * scale))
            text_surf = font.render(self.name, True, (0, 0, 0))
            image_center = self.image.get_rect().center
            text_rect = text_surf.get_rect(center=image_center)
            s = pygame.Surface(text_rect.size)
            s.set_alpha(128)
            s.fill((255, 255, 255))
            self.image.blit(s, text_rect)
            self.image.blit(text_surf, text_rect)

    def draw(self, screen, x, y):
        rect = self.image.get_rect(topleft=(x, y))
        screen.blit(self.image, rect)


class DrawableNpc:
    def __init__(self, images):
        self.original_images = images
        self.images = []
        for image in images:
            self.images.append(image.copy())

    def resize(self, scale):
        self.images = []
        for image in self.original_images:
            self.images.append(pygame.transform.scale(image,
                                                      (int(image.get_width() * scale),
                                                       int(image.get_height() * scale))))

    def draw(self, screen, i, x, y):
        rect = self.images[i].get_rect(topleft=(x, y))
        screen.blit(self.images[i], rect)
